PUT THE SHIT BELOW IN ITS OWN WIKI

[[Game loop]]
[[10 Steps to solving a programming problem]]
[[How to build a programming project]]
[[Scratch Pad]]
[[Planning your programs]]
{{{cpp
variableName.memberFunction()
phrase.size()
}}}
= Data Types=
	* What are the best types to use to store my data
	* enum's, array's, vectors, bool, char, floats, remember you can always rename a type
	* Use the smallest type needed
	* shorts are converted to int if artimatic is done on it.  Which increases cpu cycles.  Don't use short if there is math
	* 

= Flow Control =
	* Figure out when to use an if else, and when to use a switch
	* Switch statements can only be used with int's char's or enumerators
	* Use the break word "continue" or "jump" if you want to skip something in a loop like the number 5 out of printing 1 to 10
	* 
= Header Files =
	* Function declaration are written in header files
	* Function definitions are written in there own .cpp files

= Good Things =
	* while(true) loops are good for the main game loop
	* for (initialization;test;action){statement};
	* [] is the subscripting operator
	* Make puzzles easy to make an profitable!
	* Use iterators instead of subscripting opertor need to use them with the stl 
	* You don't need to use parameter names in function prototypes just the type 
	* Try to use good general names for your functions so they can be reused withou needing to change names.  IF a function always gets passed the same value make it a default argument
	* You can hide global values  global variables bad, global constants good
	* An argument is what you use in a function call to pass a value to a function. A parameter is what you use in a function definition to accept values passed to a function.
	* Avoid changing an argument variable.  Use the return value.
	* Displaying something should be done with a constant reference no need to change anything if it's just a display


== Figure out how to save game as an exe file. ==

= Examples from Da Book =
[[Logging in using logical operators]]
[[menu.cpp]]
[[again.cpp|game loop]]
[[random.cpp| random number generator]]
[[Level selection using enums and a switch statement]]
[[Computer guessing your number]]
[[Hero's Inventory Demonstrate arrays]]
[[Word Jumble]]
[[Hero's Invetory 2.0 vectors]]
[[Hero's Invetory 3.0 iterators]]
[[High Scores Algorithms]]
[[Instructions demonstrates writing new functions]]
[[ Yes or No demonstrates return values and parameters]]
[[Give me a number demonstrates default function arguments]]
[[Triple demonstrates function overloading]]
[[Take damage demonstrate function inlining]]
[[Mad-Lib Create a story based on user input]]
[[Referencing demonstrating using references]]
[[Swap Demonstrating passing by reference to alter argument variables]]
[[Inventory Display demonstrating constant reference]]
[[Iventory Reference demonstrates returturning a reference]]
[[Tic-Tac-Toe with AI has comments but didn't work]]
