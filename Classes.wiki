= Classes =
[[Constructor]]:  
[[Static data member]]:
{{{cpp

// Simple Critter
// demonstrates creating a new type

#include <iostream>

using std::cout;

class Critter // class definition --defines a new type, Critter
{
public:
	int m_Hunger; // data member, "Member qualities" notice m_
	void Greet(); // member function prototype "Member ability notice uppercase "G"
};

// Greet() function is in the scope of Critter::
void Critter::Greet() // member function definition
{
	cout << " Hi. I'm a critter.  My hunger level is " << m_Hunger << ".\n";
}

int main()
{
	// Instantiatd two objects from class Critter
	Critter crit1;
	Critter crit2;
	// "." is the member selection operator
	crit1.m_Hunger = 9;
	cout << "crit1's hunger level is " << crit1.m_Hunger << ".\n";

	crit2.m_Hunger = 3;
	cout << "crit2's hunger level is " << crit2.m_Hunger << ".\n";

	crit1.Greet();
	crit2.Greet();

	return 0;
}

{{{cpp
//Private Critter
//Demonstrates setting member access levels

#include <iostream>
using std::cout;
using std::endl;
class Critter
{
public:  
	Critter(int hunger = 0);
	int GetHunger() const;
	void SetHunger(int hunger);

private:
	int m_hunger;
};

Critter::Critter(int hunger) :
	m_hunger(hunger)
{
	cout << "A new critter has been born!" << endl;
}
//Defining accessor member functions 
//m_hunger is private Gethunger() allows it to be access outside it's class
int Critter::GetHunger()const
{
	return m_hunger;
}

void Critter::SetHunger(int hunger)
{
	if (hunger < 0)
	{
		cout << "You can't set a critter's hunger to a negative number.\n\n";
	}
	else
	{
		m_hunger = hunger;
	}
}

int main()
{
	Critter crit(5);
	//cout <<crit.m_hunger; // illegal, m_Hunger is private!
	cout << "Calling GetHunger(): " << crit.GetHunger() << "\n\n";

	cout << "Calling SetHunger with with -1 \n";
	crit.SetHunger(-1);

	cout << "Calling SetHunger() with 9.\n";
	crit.SetHunger(9);
	cout << "Calling GetHunger(): " << crit.GetHunger() << "\n\n";

	return 0;
}

#include <iostream>
class T {                   // A new type
private:                    // Section accessible only to T's member functions
protected:                  // Also accessible to classes derived from T
public:                     // Accessible to all
    int x;                  // Member data
    void f();               // Member function
    void g() {return;}      // Inline member function
    void h() const;         // Does not modify any data members!! This because it is a const?
	
    int operator+(int y);   // t+y means t.operator+(y)
    int operator-();        // -t means t.operator-()
	^^^^^^^^^^^^^^ No idea what this means?
    T(): x(1) {}            // Constructor with initialization list
    T(const T& t): x(t.x) {}// Copy constructor
    T& operator=(const T& t)
    {x=t.x; return *this; } // Assignment operator
    ~T();                   // Destructor (automatic cleanup routine)
    explicit T(int a);      // Allow t=T(3) but not t=3
    T(float x): T((int)x) {}// Delegate constructor to T(int)
    operator int() const
    {return x;}             // Allows int(t)
    friend void i();        // Global function i() has private access
    friend class U;         // Members of class U have private access
    static int y;           // Data shared by all T objects
    static void l();        // Shared code.  May access y but not x
    class Z {};             // Nested class T::Z
    typedef int V;          // T::V means int
};
void T::f() {               // Code for member function f of class T
    this->x = x;}           // this is address of self (means x=x;)
int T::y = 2;               // Initialization of static member (required)
T::l();                     // Call to static member
T t;                        // Create object t implicit call constructor
t.f();                      // Call method f on object t

struct T {                  // Equivalent to: class T { public:
    virtual void i();         // May be overridden at run time by derived class
    virtual void g()=0; };    // Must be overridden (pure virtual)
class U: public T {         // Derived class U inherits all members of base T
public:
    void g(int) override; };  // Override method g
class V: private T {};      // Inherited members of T become private
class W: public T, public U {};
// Multiple inheritance
class X: public virtual T {};
// Classes derived from X have base T directly

// All classes have a default copy constructor, assignment operator, and destructor, which perform the
// corresponding operations on each data member and each base class as shown above. There is also a default no-argument
// constructor (required to create arrays) if the class has no constructors. Constructors, assignment, and
// destructors do not inherit.
}}}
