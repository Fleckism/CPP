{{{cpp
//Static Critter
//Demonstrates static member variable functions

#include <iostream>
using std::cout;
using std::endl;

class Critter
{
public:
	static int s_Total; //static member declaration, 
	//total number of critter objects in existence

	Critter(int hunger = 0);
	static int GetTotal(); //static member function prototype

private:
	int m_Hunger;
};

int Critter::s_Total = 0;  //static member variable initialization outside of class so Critter:: must be use does this make it global?

Critter::Critter(int hunger) :
	m_Hunger(hunger)
{
	cout << "A critter has been born!" << endl;
	++s_Total;
}

int Critter::GetTotal() // static member function definition
{
	return s_Total;
}

int main()
{
	cout << "The total number of critters is: ";
	cout << Critter::s_Total << "\n\n"; //outputting the return value from GetTotal()

	Critter crit1, crit2, crit3;

	cout << "\nThe total number of critters is: ";
	cout << Critter::GetTotal() << "\n";

	cout << crit1.s_Total << "crit1.s_Total output \n\n";  //an object
	
	return 0;
}
