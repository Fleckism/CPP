= Functions =
[[Return values and parameters]]
[[Arguments]]:
[[Overloading]]
[[Inlining]]
•	Function signature is function name and parameter list

*  Should only do one task
*  Overloading means to redefine
* Is a named sequence of statements
*   return or evaluate
*	improve organization
* 
* 
* Avoid changing an "function(argument)" variable.  Send back new information
* -through a return value.
	
	
* myFunction(type passByValue)  that the parameter argument will get a copy of the argument variable. 
* -And not the value itself locally modified not globally.
* myFunction(type& passByReference):  Passing by reference means what ever is done to the parameter will be 
* -done to the argument variable
* Passing by value changes the variable globally
* Avoid changing an "function(argument)" variable.  Send back new information through a return value.

{{{cpp
// Instructions
// Demonstrates writing new functions

#include <iostream>
using std::cout;

// function prototype (declaration) you don't need to use parameter names just types in prototype.
// return type "void", followed by the name "instructions" (parameters) receive values sent as arguements
// void returns no value   () takes no values
// ends with semicolon
void instructions();

int main()
{
	// function call
	instructions();
	return 0;
}

// function definition writing all the code that makes the function work
void instructions()  // this is the function header, below is the function body
{
	cout << "Welcome to the most fun you've ever had with text!\n\n";
	cout << "Here's how to play the game...\n";
}

