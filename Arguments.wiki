= Arguments =
	*  By value when you want the computer to make a copy of the variable.  And you want the function to alter the 
	*  -parameter in a function, but you don't want the actual arguement variable to be affected.
* *Constant Reference*:  When you want to efficiently pass a value that you don't need to change.
* *As a reference*: Pass a reference only when you want to alter the value of the argument variable. Howerever
* -you should try to avoid change the argument variable whenever possible.
* 
* 
[[Arguments]]:  What is passed into a function(argument).  

{{{cpp
// Give me a number
// Demonstrate default function arguments

#include <iostream>
#include <string>

using std::cin;
using std::cout;
using std::string;
using std::endl;
// Function definition
// arguments after a default must also be default.
int askNumber(int high, int low = 1);

int main()
{
	// 5 is assigned to high, and it uses the default value
	int number = askNumber(5);
	cout << "Thanks for entering: " << number << "\n\n";
	// 10 is assigned to high, and 5 overrides the default low of 1
	number = askNumber(10, 5);
	cout << "Thanks for entering: " << number << "\n\n";

	return 0;
}

int askNumber(int high, int low)
{
	int num;
	do
	{
		cout << "Please enter a number" << "(" << low << "-" << high << ")";
		cin >> num;
	} while (num > high || num < low);
	
	return num;
}
